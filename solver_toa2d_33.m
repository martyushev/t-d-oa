% 3s/3r ToA self-localization solver
function [Se,Re] = solver_toa2d_33(D)

    [C,U] = coefs_toa2d_33(D);

    Z = red_18x28_toa2d_33(C);

    [Se,Re] = Z2SR(Z,C,U,D);

end



function [C,U] = coefs_toa2d_33(D)

    C = zeros(3,10);

    C([1,2,3]) = -2;
    C(19) = -2*D(1);
    C(20) = -2*D(2);
    C(21) = -2*D(3);
    C(10) = -2*D(4);
    C(11) = -2*D(5);
    C(12) = -2*D(6);
    C(4) = -2*D(7);
    C(5) = -2*D(8);
    C(6) = -2*D(9);
    C(18) = 2*D(3)+2*D(6);
    C(15) = 2*D(3)+2*D(9);
    C(16) = 2*D(4)+2*D(1);
    C(17) = 2*D(5)+2*D(2);
    C(9) = 2*D(6)+2*D(9);
    C(13) = 2*D(7)+2*D(1);
    C(7) = 2*D(7)+2*D(4);
    C(14) = 2*D(8)+2*D(2);
    C(8) = 2*D(8)+2*D(5);
    C(28) = -2*D(1)^2-2*D(4)*D(7)+2*D(1)*D(7)+2*D(4)*D(1);
    C(29) = -2*D(2)^2-2*D(5)*D(8)+2*D(2)*D(8)+2*D(5)*D(2);
    C(25) = -2*D(4)^2+2*D(4)*D(7)-2*D(1)*D(7)+2*D(4)*D(1);
    C(26) = -2*D(5)^2+2*D(5)*D(8)-2*D(2)*D(8)+2*D(5)*D(2);
    C(22) = -2*D(7)^2+2*D(4)*D(7)+2*D(1)*D(7)-2*D(4)*D(1);
    C(23) = -2*D(8)^2+2*D(5)*D(8)+2*D(2)*D(8)-2*D(5)*D(2);
    C(27) = -2*D(3)*D(9)+2*D(6)*D(3)+2*D(6)*D(9)-2*D(6)^2;
    C(24) = -2*D(6)*D(3)+2*D(6)*D(9)+2*D(3)*D(9)-2*D(9)^2;
    C(30) = -2*D(6)*D(9)+2*D(3)*D(9)+2*D(6)*D(3)-2*D(3)^2;

    C = C./repmat(sqrt(sum(C.*conj(C),2)),1,size(C,2));

    U = @(Z)[Z(1,:).*Z(2,:).*Z(3,:);Z(1,:).^2;Z(2,:).*Z(1,:);Z(2,:).^2;Z(1,:).*Z(3,:);Z(3,:).*Z(2,:);Z(3,:).^2;Z(1,:);Z(2,:);Z(3,:)];

end



% Input: coefficient matrix C of size 3x10
% Output: solution matrix Z of size 3x10
function Z = red_18x28_toa2d_33(C)

    M = sparse([1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18],[1,3,4,5,6,11,12,19,21,26,2,5,6,12,13,20,21,22,27,11,12,13,14,15,21,25,26,27,28,8,9,10,11,12,14,19,24,26,3,7,8,9,23,24,25,26,27,28,10,14,15,16,17,18,23,24,26,28,1,3,4,5,6,11,12,19,21,26,2,5,6,12,13,20,21,22,27,11,12,13,14,15,21,25,26,27,28,8,9,10,11,12,14,19,24,26,3,7,8,9,23,24,25,26,27,28,10,14,15,16,17,18,23,24,26,28,1,3,4,5,6,11,12,19,21,26,2,5,6,12,13,20,21,22,27,11,12,13,14,15,21,25,26,27,28,8,9,10,11,12,14,19,24,26,3,7,8,9,23,24,25,26,27,28,10,14,15,16,17,18,23,24,26,28],C([1,4,10,16,19,25,28,7,13,22,1,10,16,25,28,4,7,13,22,10,16,19,25,28,1,4,7,13,22,4,7,25,16,19,28,1,22,13,1,4,7,10,22,25,13,16,19,28,10,16,19,22,25,28,4,7,1,13,2,5,11,17,20,26,29,8,14,23,2,11,17,26,29,5,8,14,23,11,17,20,26,29,2,5,8,14,23,5,8,26,17,20,29,2,23,14,2,5,8,11,23,26,14,17,20,29,11,17,20,23,26,29,5,8,2,14,3,6,12,18,21,27,30,9,15,24,3,12,18,27,30,6,9,15,24,12,18,21,27,30,3,6,9,15,24,6,9,27,18,21,30,3,24,15,3,6,9,12,24,27,15,18,21,30,12,18,21,24,27,30,6,9,3,15]),18,28);

    [L,~,p] = lu(M(:,1:10),'vector');
    M = M(p(end-7:end),11:end)-L(end-7:end,:)*(L(1:10,:)\M(p(1:10),11:end));
    %[M,~] = qr(M(:,1:10),M(:,11:end));
    %M = M(end-7:end,:);

    T0 = zeros(10);
    T0([1,3,4,8,9,5,6,10],:) = -M(:,9:end);
    T0([82,97]) = 1;
    T1 = zeros(10);
    T1([1,3,4,8,9,5,6,10],[1,3,4,8,9,5,6,10]) = M(:,1:8);
    T1([12,67]) = 1;

    [V,~] = eig(T0,T1);
    Z = V(7:9,:)./repmat(V(10,:),3,1);
    Z = Z(:,all(isfinite(Z)));

end



function [Se,Re] = Z2SR(Z,C,U,D)

    k = 8; % number of true roots
    e = U(Z);
    e = e./repmat(sqrt(sum(e.*conj(e),1)),size(e,1),1);
    e = C*e;
    e = sum(e.*conj(e),1);
    [~,I] = sort(e);
    Z = Z(:,I(1:k)); % filter out false roots
    Z = Z(:,~any(imag(Z))); % real roots only

    [Se,Re] = positionRecovery(Z,D);

end



function [Se,Re] = positionRecovery(Z,D)

    r = 0; % number of real solutions
    n = size(D,1);
    m = size(D,2);
    nr = size(Z,2);
    Se = zeros(2,m,nr);
    Re = zeros(2,n,nr);
    
    for i = 1:nr
        L = zeros(m,m);
        L(1,2) = Z(1,i);
        L(1,3) = Z(2,i);
        L(2,3) = Z(3,i);

        [S,R,flag] = DL2SR(D,L);
        if ~flag
            r = r + 1;
            Se(:,:,r) = S;
            Re(:,:,r) = R;
        end
    end
    Se = Se(:,:,1:r);
    Re = Re(:,:,1:r);

end



function [S,R,flag] = DL2SR(D,L)

    flag = 0;
    n = size(D,1);
    m = size(D,2);
    S = zeros(2,m);
    R = zeros(2,n);
    if any(L(:)<0); flag = 1; return; end
    S(:,1) = [0; 0];
    S(:,2) = [sqrt(L(1,2)); 0];
    x = (L(1,2)+L(1,3)-L(2,3))/(2*S(1,2));
    if L(1,3)<x^2; flag = 1; return; end
    y = sqrt(L(1,3)-x^2);
    S(:,3) = [x; y];

    for k = 1:n
        M = [L(1,2)+D(k,1)-D(k,2),-2*S(1,2),0;
            S(1,3)^2+S(2,3)^2+D(k,1)-D(k,3),-2*S(1,3),-2*S(2,3)];
        [~,~,V] = svd(M);
        V = V(:,end);
        R(:,k) = V(2:3)./V(1);
    end

end